chapter:implementation[Implementation of the Languages]

Both, the domain model as well as the service language, have been developed using the
link[http://www.xtext.org][Xtext languagedevelopment framework]. While the domain model language is originally
bundled with Xtext as an example, the service language was developed from scratch. In this section we
go into detail how both languages have been implemented.

section[The Domain Model Language]

The domain model language is implemented using the Xtext language framework. To define a language, one
develops a grammar in the Xtext grammar language, which is a straight forward EBNF style grammar language
with some Xtext specific additions. Also, as we are using the Java type system, the concepts of the domain
model language have to be mapped to the Java type system by implementing a model inferrer, which also
contributes to the compiler by adding custom compilation strategies for DAO and service generation.

section2[The Grammar]

The header of the domain model grammar is given here:

code[Xtext][
grammar org.eclipse.xtext.example.domainmodel.Domainmodel with org.eclipse.xtext.xbase.Xbase

generate domainmodel "http://www.xtext.org/example/Domainmodel"
]

It simply declares a grammar code[org.eclipse.xtext.example.domainmodel.Domainmodel] that inherits all
rules from another grammar code[org.eclipse.xtext.xbase.Xbase]. The inherited grammar defines the Xbase
expression rules. In the second line, the Xtext generator is told to generate a new EMF meta model with
the given URI.

The rest of the grammar defines the abstract and concrete syntax of the domain model language.

code[Xtext][
DomainModel:
	elements+=AbstractElement*;

AbstractElement:
	PackageDeclaration | Entity | Import;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

PackageDeclaration:
	'package' name=QualifiedName '{'
		elements+=AbstractElement*
	'}';

Entity:
	'entity' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
		features+=Feature*
	'}';

Feature:
	Property | Operation;

Property:
	(generated?='generated')? name=ValidID ':' type=JvmTypeReference ('->' mappedBy=\[Property | QualifiedName\])? 
;

Operation:
	Validate | Generate;

Validate:
	 name='validate'
		body=XBlockExpression;

Generate:
	 name='generate' 
		body=XBlockExpression;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;

ValidID:
	(ID | 'generated' | 'validate')
;
]

The grammar declares a simple entity languages, where entities can be declared in packages and contain
properties of any Java type and a validation and generation operation. These two operations reuse the
code[XBlockExpression] from the inherited Xbase grammar. While this grammar is very close to the original
Xtext example, there are major extensions to the Jvm model generation, described in the following section.

section2[Jvm Model Inference]

The Jvm model inferrer for the entity classes also looks pretty much like the original. Just the generation
of an id field and the annotation generation has been added here. In addition to the entity class, there are
two more classes to be mapped to for each entity.

To create a DAO class, the name of the entity plus an addition code[DAO] is taken as its class name.
The generation of the CRUD methods is done by creating a signature for each of them using the Xbase model
inference mechanism. The methods' bodies are generated by adding a compilation strategy to the Xbase
compiler like this:

code[
e.toMethod('''retrieve«t.simpleName»ById'''.toString, ref) \[
	visibility = JvmVisibility::PUBLIC
	parameters += e.toParameter("id", typeof(int).getTypeForName(e))
	setBody \[
		trace(e)
		append('''
		javax.persistence.EntityManager _entityManager = _emf.createEntityManager();
		_entityManager.getTransaction().begin();
		«t.simpleName» «t.simpleName.toFirstLower» = _entityManager.find(«t.simpleName».class, id);
		_entityManager.getTransaction().commit();
		_entityManager.close();
		return «t.simpleName.toFirstLower»;
		'''.toString)
	\]
\]
]

The code above generates a method that retrieves entities by their ID. In the closure, which is handed
in to the setBody method, the compilation strategy for the method's body is defined. It consists of a
trace commant, which makes it possible to use the Eclipse debugger for the DSL instead of jumping into
the generated Java code. The append command takes a string which is simply inserted as the method's body.

The generation of the services classes is similar to that of the DAO classes.

code[
e.toMethod('''get«t.simpleName»AsJSON'''.toString, "javax.ws.rs.core.Response".getTypeForName(e)) \[
	visibility = JvmVisibility::PUBLIC
	annotations += e.createGetAnnotation()
	annotations += e.createProducesAnnotation("application/json")
	annotations += e.createPathAnnotation("{id}")
	parameters += e.toParameter("id", typeof(int).getTypeForName(e)) \[
		annotations += e.createPathParamAnnotation("id")
	\]
	setBody \[
		trace(e)
		append('''
		«t.simpleName» «t.simpleName.toFirstLower» = _dao.retrieve«t.simpleName»ById(id);
		if(«t.simpleName.toFirstLower» == null){
			return Response.status(javax.ws.rs.core.Response.Status.NOT_FOUND).build();
		}
		return Response.ok(«t.simpleName.toFirstLower»).build();
		'''.toString)
	\]
\]
]

Here, a method is generated like for the DAO class. The method is also annotated with some JAX-RS annotations
(code[@GET], code[@Produces], code[@PathParam]). Also a parameter code[id] is generated for the method.
Again, a compilation strategy is added to create the method's body.


section[The Services Language]

section2[The Grammar]

The grammar of the service language is given below.

code[Xtext][
grammar org.eclipse.xtext.services.Services with org.eclipse.xtext.xbase.Xbase

generate services "http://www.eclipse.org/xtext/services/Services"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

ServicesFile:
	component=Component
;

Component:
	'package' packageName=QualifiedName
	(imports+=Import)*
	"component" name=ValidID 
		('conforms' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)?
		'{'
			('requires' requires+=RequireDeclaration (',' requires+=RequireDeclaration)*)?
		(services+=Service)*
		'}'
;

Service:
	( (get?='GET' | post?='POST' | put?='PUT' | delete?='DELETE') )? name=Path
		':' type=JvmTypeReference
		body=XBlockExpression
;

RequireDeclaration:
	type=JvmTypeReference (name=ID)?
;


Import:
	"import" importedNamespace=QualifiedName
;

Path:
	segments+=PathSegment ('/' segments+=PathSegment)*
;

PathSegment:
	ParameterSegment | SimpleSegment
;

ParameterSegment: 
	'{'param=Parameter '}'
;

Parameter
	returns types::JvmFormalParameter:
		name=ValidID ':' parameterType=JvmTypeReference
;

SimpleSegment:
	name=ValidID
;
]

The services grammar also inherits from Xbase and imports the Java type system. The Xtext generator will
create a meta model, like for the domain model language, resembling the AST structure of the service
language. 

