/*
* generated by Xtext
*/
package org.eclipse.xtext.example.domainmodel.ui.refactoring;

import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.example.domainmodel.domainmodel.Property;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.ui.jvmmodel.refactoring.AbstractJvmModelRenameStrategy;

/**
 * Encapsulates the model changes of a rename refactoring.
 */
public class DomainmodelRenameStrategy extends AbstractJvmModelRenameStrategy {

	@Override
	protected void setInferredJvmElementName(String name, EObject renamedSourceElement) {
		Set<EObject> jvmElements = getJvmModelAssociations().getJvmElements(renamedSourceElement);
		for (EObject jvmElement : jvmElements) {
			if (renamedSourceElement instanceof Property) {
				if (jvmElement instanceof JvmField) {
					((JvmField) jvmElement).setSimpleName(name);
				} else if (jvmElement instanceof JvmOperation) {
					JvmOperation operation = (JvmOperation) jvmElement;
					operation.setSimpleName(operation.getSimpleName().substring(0, 3) + Strings.toFirstUpper(name));
				}
			} else {
				if (jvmElement instanceof JvmMember) {
					((JvmMember) jvmElement).setSimpleName(name);
				}
			}
		}
	}
}
